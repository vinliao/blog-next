import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, e as element, t as text, b as space, c as claim_element, f as children, g as claim_text, h as detach_dev, j as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as noop, p as empty, q as query_selector_all, r as destroy_each } from './client.447ea288.js';

/* src/routes/index.svelte generated by Svelte v3.29.4 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (26:0) {#each posts as post}
function create_each_block(ctx) {
	let div;
	let span;
	let t0;
	let t1;
	let br0;
	let t2;
	let a;
	let t3_value = /*post*/ ctx[1] + "";
	let t3;
	let t4;
	let br1;
	let t5;

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text("17-02-2006");
			t1 = space();
			br0 = element("br");
			t2 = space();
			a = element("a");
			t3 = text(t3_value);
			t4 = space();
			br1 = element("br");
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "17-02-2006");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			br0 = claim_element(div_nodes, "BR", {});
			t2 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, t3_value);
			a_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			br1 = claim_element(div_nodes, "BR", {});
			t5 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "content-date svelte-1ogylac");
			add_location(span, file, 27, 4, 387);
			add_location(br0, file, 28, 4, 438);
			attr_dev(a, "href", "/post");
			attr_dev(a, "class", "content-title svelte-1ogylac");
			add_location(a, file, 29, 4, 449);
			add_location(br1, file, 30, 4, 504);
			attr_dev(div, "class", "content svelte-1ogylac");
			add_location(div, file, 26, 2, 361);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t0);
			append_dev(div, t1);
			append_dev(div, br0);
			append_dev(div, t2);
			append_dev(div, a);
			append_dev(a, t3);
			append_dev(div, t4);
			append_dev(div, br1);
			append_dev(div, t5);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(26:0) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let each_1_anchor;
	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1kj88h7\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Stupid blog";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let posts = ["this is my first post", "this is my second post"];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ posts });

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMDQwOTBmMjkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGxldCBwb3N0cyA9IFsndGhpcyBpcyBteSBmaXJzdCBwb3N0JywgJ3RoaXMgaXMgbXkgc2Vjb25kIHBvc3QnXVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgXG4gIC5jb250ZW50IHtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTByZW07XG5cdH0gXG5cdFxuXHQuY29udGVudC10aXRsZSB7XG5cdFx0Zm9udC1zaXplOiA1cmVtO1xuXHRcdGZvbnQtd2VpZ2h0OiA3MDA7XG5cdH1cblxuXHQuY29udGVudC1kYXRlIHtcblx0XHRjb2xvcjogaHNsKDAsIDAlLCA0MCUpO1xuXHRcdGZvbnQtd2VpZ2h0OiAyMDBcblx0fVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+U3R1cGlkIGJsb2c8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cdFxuXG57I2VhY2ggcG9zdHMgYXMgcG9zdH1cbiAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICA8c3BhbiBjbGFzcz1cImNvbnRlbnQtZGF0ZVwiPiAxNy0wMi0yMDA2IDwvc3Bhbj5cbiAgICA8YnIgLz5cbiAgICA8YSBocmVmPVwiL3Bvc3RcIiBjbGFzcz1cImNvbnRlbnQtdGl0bGVcIj4ge3Bvc3R9IDwvYT5cbiAgICA8YnIgLz5cbiAgPC9kaXY+XG57L2VhY2h9Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkE2QjRDLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBSnpDLEdBQUs7Ozs7Z0NBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBQUMsR0FBSzs7OzsrQkFBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBeEJELEtBQUssSUFBSSx1QkFBdUIsRUFBRSx3QkFBd0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
